const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const RefreshToken = require("../models/RefreshToken"); 

/* =============================
   üîπ ƒêƒÇNG K√ù (Gi·ªØ nguy√™n)
============================= 
*/
exports.signup = async (req, res) => {
  try {
    const { name, email, password } = req.body;
    const existingUser = await User.findOne({ email });
    if (existingUser) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i!" });

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ name, email, password: hashedPassword });
    await newUser.save();

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user: newUser });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

/* =============================
   üîπ ƒêƒÇNG NH·∫¨P (S·ª≠a ƒë·ªïi theo Ho·∫°t ƒë·ªông 1)
============================= 
*/
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u!" });
    }

    // ‚úÖ 1. T·∫†O ACCESS TOKEN (h·∫°n ng·∫Øn, vd: 15 ph√∫t)
    const accessToken = jwt.sign(
      { id: user._id, name: user.name, email: user.email, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "15m" } // 15 ph√∫t
    );

    // ‚úÖ 2. T·∫†O REFRESH TOKEN (h·∫°n d√†i, vd: 7 ng√†y)
    const refreshToken = jwt.sign(
      { id: user._id }, // Ch·ªâ c·∫ßn ID trong refresh token
      process.env.JWT_REFRESH_SECRET, // D√πng secret key KH√ÅC
      { expiresIn: "7d" } // 7 ng√†y
    );

    // ‚úÖ 3. L∆ØU REFRESH TOKEN V√ÄO DATABASE (SV1 + SV3)
    // X√≥a RT c≈© c·ªßa user n√†y n·∫øu c√≥ (ƒë·ªÉ ƒë·∫£m b·∫£o 1 user ch·ªâ c√≥ 1 RT)
    await RefreshToken.deleteMany({ user: user._id });
    
    // L∆∞u RT m·ªõi
    const newRefreshToken = new RefreshToken({
      user: user._id,
      token: refreshToken,
      expiryDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 ng√†y sau
    });
    await newRefreshToken.save();

    // ‚úÖ 4. TR·∫¢ V·ªÄ C·∫¢ 2 TOKEN CHO CLIENT
    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      accessToken, // Tr·∫£ AT
      refreshToken, // Tr·∫£ RT
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
      },
    });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

/* =============================
   üîπ ƒêƒÇNG XU·∫§T (S·ª≠a ƒë·ªïi theo Ho·∫°t ƒë·ªông 1)
============================= 
*/
exports.logout = async (req, res) => {
  try {
    // Nh·∫≠n refreshToken t·ª´ client (client ph·∫£i g·ª≠i l√™n)
    const { refreshToken } = req.body;
    if (!refreshToken) {
      return res.status(400).json({ message: "Thi·∫øu Refresh Token" });
    }

    // ‚úÖ (SV1) T√¨m v√† X√ìA (REVOKE) token kh·ªèi DB
    const result = await RefreshToken.deleteOne({ token: refreshToken });

    if (result.deletedCount === 0) {
      // D√π kh√¥ng t√¨m th·∫•y token c≈©ng n√™n tr·∫£ v·ªÅ 200 (an to√†n h∆°n)
      // nh∆∞ng ·ªü ƒë√¢y ta tr·∫£ 400 ƒë·ªÉ client bi·∫øt token b·ªã sai
      return res.status(400).json({ message: "Refresh Token kh√¥ng h·ª£p l·ªá" });
    }

    res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

/* =============================
   üîπ L√ÄM M·ªöI TOKEN (API M·ªöI - Ho·∫°t ƒë·ªông 1)
============================= 
*/
exports.refreshToken = async (req, res) => {
  const { refreshToken } = req.body;
  if (!refreshToken) {
    return res.status(401).json({ message: "Y√™u c·∫ßu Refresh Token" });
  }

  try {
    // 1. (SV1 + SV3) T√¨m RT trong DB
    const rtDocument = await RefreshToken.findOne({ token: refreshToken });

    if (!rtDocument) {
      return res.status(403).json({ message: "Refresh Token kh√¥ng h·ª£p l·ªá" });
    }

    // 2. Ki·ªÉm tra RT c√≤n h·∫°n (trong DB)
    if (rtDocument.expiryDate < new Date()) {
      await RefreshToken.findByIdAndDelete(rtDocument._id); // X√≥a token h·∫øt h·∫°n
      return res.status(403).json({ message: "Refresh Token ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i" });
    }

    // 3. Verify ch·ªØ k√Ω RT (d√πng REFRESH_SECRET)
    jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET, async (err, decoded) => {
      if (err) {
        return res.status(403).json({ message: "Refresh Token kh√¥ng h·ª£p l·ªá (sai ch·ªØ k√Ω)" });
      }

      // 4. L·∫•y th√¥ng tin user
      const user = await User.findById(decoded.id);
      if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });

      // 5. ‚úÖ C·∫•p Access Token M·ªöI
      const newAccessToken = jwt.sign(
        { id: user._id, name: user.name, email: user.email, role: user.role },
        process.env.JWT_SECRET, // D√πng ACCESS_SECRET
        { expiresIn: "15m" } // H·∫°n 15 ph√∫t
      );

      res.status(200).json({
        message: "L√†m m·ªõi token th√†nh c√¥ng",
        accessToken: newAccessToken,
      });
    });

  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};
/* =============================
   üîπ QU√äN M·∫¨T KH·∫®U
============================= */
exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // T·∫°o token reset m·∫≠t kh·∫©u
    const resetToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "10m" });

    // ‚ö†Ô∏è Trong m√¥i tr∆∞·ªùng th·∫≠t, token s·∫Ω g·ª≠i qua email
    res.status(200).json({
      message: "Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c t·∫°o!",
      token: resetToken,
    });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

/* =============================
   üîπ ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U
============================= */
exports.resetPassword = async (req, res) => {
  try {
    const { token } = req.params;
    const { newPassword } = req.body;

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.id);

    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user!" });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (err) {
    res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!", error: err.message });
  }
};

