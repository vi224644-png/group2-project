const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

// ƒêƒÉng k√Ω
exports.signup = async (req, res) => {
  try {
    const { name, email, password } = req.body;
    const existingUser = await User.findOne({ email });
    if (existingUser) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i!" });

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ name, email, password: hashedPassword });
    await newUser.save();

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user: newUser });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

// ƒêƒÉng nh·∫≠p (c√≥ ph√¢n quy·ªÅn)
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u!" });
    }

    // T·∫°o token c√≥ ch·ª©a role
    const token = jwt.sign(
      { id: user._id, name: user.name, email: user.email, role: user.role }, // ‚úÖ th√™m role v√†o token
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );


    // Tr·∫£ v·ªÅ d·ªØ li·ªáu k√®m role
    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
      },
    });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};


// ƒêƒÉng xu·∫•t (client s·∫Ω x√≥a token)
exports.logout = (req, res) => {
  res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
};
/* =============================
   üîπ QU√äN M·∫¨T KH·∫®U
============================= */
exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // T·∫°o token reset m·∫≠t kh·∫©u
    const resetToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "10m" });

    // ‚ö†Ô∏è Trong m√¥i tr∆∞·ªùng th·∫≠t, token s·∫Ω g·ª≠i qua email
    res.status(200).json({
      message: "Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c t·∫°o!",
      token: resetToken,
    });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

/* =============================
   üîπ ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U
============================= */
exports.resetPassword = async (req, res) => {
  try {
    const { token } = req.params;
    const { newPassword } = req.body;

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.id);

    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user!" });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (err) {
    res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!", error: err.message });
  }
};

