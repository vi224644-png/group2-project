return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // T·∫°o token reset m·∫≠t kh·∫©u
    const resetToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "10m" });

    // ‚ö†Ô∏è Trong m√¥i tr∆∞·ªùng th·∫≠t, token s·∫Ω g·ª≠i qua email
    res.status(200).json({
      message: "Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c t·∫°o!",
      token: resetToken,
    });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

/* =============================
   üîπ ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U
============================= */
exports.resetPassword = async (req, res) => {
  try {
    const { token } = req.params;
    const { newPassword } = req.body;

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.id);

    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user!" });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (err) {
    res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!", error: err.message });
  }
};
